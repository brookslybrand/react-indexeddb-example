{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["formStyle","padding","inputStyle","margin","Form","_ref","db","_useState","useState","firstname","lastname","_useState2","Object","slicedToArray","names","setNames","useEffect","version","stores","formData","transaction","asyncToGenerator","regenerator_default","a","mark","_callee","dbFirstname","dbLastname","wrap","_context","prev","next","get","sent","add","id","value","stop","this","catch","e","console","log","stack","close","setName","useCallback","put","prevNames","objectSpread","defineProperty","handleSetName","target","handleSubmit","preventDefault","react_default","createElement","style","onSubmit","type","name","onChange","dist","App","open","setOpen","width","onClick","concat","src_Form","Dexie","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9873b4b0.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Offline, Online } from 'react-detect-offline'\n\n// some inline styling so everything isn't squished\nconst formStyle = { padding: '2rem 0rem' }\nconst inputStyle = { margin: '1rem 0rem' }\n\n// a simple form with a first name, last name, and submit button\nconst Form = ({ db }) => {\n  // store form values in a state hook\n  const [names, setNames] = useState({ firstname: '', lastname: '' })\n\n  // set firstname and lastname to whatever is in the database\n  // if no values are in the database, set the database values to ''\n  useEffect(\n    () => {\n      // create the store\n      db.version(1).stores({ formData: 'id,value' })\n\n      // perform a read/write transatiction on the new store\n      db.transaction('rw', db.formData, async () => {\n        // get the first and last name from the data\n        const dbFirstname = await db.formData.get('firstname')\n        const dbLastname = await db.formData.get('lastname')\n\n        // if the first or last name fields have not be added, add them\n        if (!dbFirstname) await db.formData.add({ id: 'firstname', value: '' })\n        if (!dbLastname) await db.formData.add({ id: 'lastname', value: '' })\n\n        // set the initial values\n        setNames({\n          firstname: dbFirstname ? dbFirstname.value : '',\n          lastname: dbLastname ? dbLastname.value : ''\n        })\n      }).catch(e => {\n        // log any errors\n        console.log(e.stack || e)\n      })\n\n      // close the database connection if form is unmounted or the\n      // database connection changes\n      return () => db.close()\n    },\n    // run effect whenever the database connection changes\n    [db]\n  )\n\n  // sets the name in the store and in the state hook\n  const setName = useCallback(\n    id => value => {\n      // update the store\n      db.formData.put({ id, value })\n      // update the state hook\n      setNames(prevNames => ({ ...prevNames, [id]: value }))\n    },\n    [db]\n  )\n\n  // partial application to make on change handler easier to deal with\n  const handleSetName = useCallback(id => e => setName(id)(e.target.value), [\n    db\n  ])\n\n  // when the form is submitted, prevent the default action\n  // which reloads the page and reset the first and last name\n  // in both the store and in the state hook\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault()\n      setName('firstname')('')\n      setName('lastname')('')\n    },\n    [db]\n  )\n\n  return (\n    <form style={formStyle} onSubmit={handleSubmit}>\n      <span>First name:</span>\n      <br />\n      <input\n        style={inputStyle}\n        type=\"text\"\n        name=\"firstname\"\n        value={names.firstname}\n        onChange={handleSetName('firstname')}\n      />\n      <br />\n      <span>Last name:</span>\n      <br />\n      <input\n        style={inputStyle}\n        type=\"text\"\n        name=\"lastname\"\n        value={names.lastname}\n        onChange={handleSetName('lastname')}\n      />\n      <br />\n      {/* Handle whether or not the user is offline */}\n      <Online>\n        <input type=\"submit\" value=\"Submit\" />\n      </Online>\n      <Offline>You are currently offline!</Offline>\n    </form>\n  )\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport Dexie from 'dexie'\n\nimport Form from './Form'\n\nconst App = () => {\n  const [open, setOpen] = useState(true)\n\n  return (\n    <div style={{ margin: '2rem auto', width: '200px' }}>\n      <button onClick={() => setOpen(!open)}>{`${\n        open ? 'Close' : 'Open'\n      } Form`}</button>\n      {/* Pass in a new connection to the database when Form is first rendered */}\n      {open && <Form db={new Dexie('FormDatabase')} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}